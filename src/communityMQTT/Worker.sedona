@palette=false
abstract class Worker extends Component
{
  @config @asStr property Buf(64) host = "192.168.1.128"
  @config property int port = 1883

  @config @asStr property Buf(16) clientid = "vincent"
  @config @asStr property Buf(16) username
  @config @asStr property Buf(16) password

  define int Ok = 0
  define int Err_InvalidParent = 1
  define int Err_InvalidHost = 2
  define int Err_InvalidPort = 3
  define int Err_InvalidClientId = 4

  define Str WorkerStatus = "Ok, Invaid Parent, Invalid Host, Invalid Port, Invalid ClientId"
  @range=WorkerStatus
  @readonly property byte status = 0
  
  // MQTTHandle 
  Obj handle = null

  abstract void doWork(Message m) 
  
  // natives 
  static native Obj startSession(Str host, int port, Str clientid, Str username, Str password)
  static native void yield(Obj handle)
  static native void stopSession(Obj handle)

  virtual void onStatusOk() {
    handle = startSession(host.toStr(), port, clientid.toStr(), username.toStr(), password.toStr())
  }
  
  void validateStatus() 
  {
    Component parentComponent = Sys.app.lookup(parent)
    Str parentName = parentComponent?.type?.name
    if (parentName != "MQTTService")
      status := Err_InvalidParent
    else if (port == 0)
      status := Err_InvalidPort
    else if (host.toStr().length() == 0)
      status := Err_InvalidHost
    else if (clientid.toStr().length() == 0)
      status := Err_InvalidClientId
    else
      status := Ok

    if (status == Ok)
      onStatusOk()
  }

  override virtual void start() 
  {
    validateStatus()
  }
  
  override virtual void stop() 
  {
    if (handle != null)
    {
      stopSession(handle)
      handle = null
    }
  }

  override int parentEvent(int eType, Component parent)
  {
    if (eType == Component.ADDED && parent.type.name != "MQTTService")
      status := Err_InvalidParent; 
    return 0
  }
  
  virtual override void changed(Slot slot) 
  {
    super.changed(slot)
    if (slot.name == "host" || slot.name == "port")
      validateStatus()
  }

  virtual override void execute() 
  {
    if (status != Ok)
      return 

    if (children == nullId)
      return;

    Component child = Sys.app.lookup(children)
    while(child != null) {
      if (child.type.is(Message.type)) {
        Message m = (Message)child;
        if (m.status == Ok)
          doWork(m)
      }
      child = Sys.app.lookup(child.nextSibling)
    }
    
    yield(handle)
  }
}

@palette=false
abstract class Message extends Component
{
  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////
  define Str QoSLevels = "FireAndForget, GuaranteeReceived, GuaranteeReceivedOnce"

  @range=QoSLevels
  @config property byte QoS = 0

  @config @asStr property Buf(16) topic = ""

  define int Ok = 0
  define int Err_InvalidParent = 1
  define int Err_InvalidTopic = 2
  define Str StatusMessages = "Ok, Invalid Parent, Invalid Topic"

  @range=StatusMessages
  @readonly property byte status = 0
  
  // 0: publish when changed; 1: publish per 1 sec; 2: per 2 secs; 3: ...
  @unit=Units.second
  @config property int publishInterval = 5
  
  ////////////////////////////////////////////////////////////////
  // Methods
  ////////////////////////////////////////////////////////////////
  // natives
  static native void doPublish(Obj handle, Str topic, Str payload, int payload_len, int qos)
  static native void doSubscribe(Obj handle, Str topic, int qos)
  static native bool fetchData(Obj handle, Str topic, Str buf, int length);

  virtual Str getPayload() { return "" }

  void validateStatus() 
  {
    Component parentComponent = Sys.app.lookup(parent)
    Str parentName = parentComponent?.type?.name
    if (!parentComponent.type.is(Publisher.type) && !parentComponent.type.is(Subscriber.type))
      status := Err_InvalidParent; 
    else if (topic.toStr().length() > 0)
      status := Ok
    else
      status := Err_InvalidTopic
  }
  
  override virtual void start() 
  {
    validateStatus()
  }
  
  override virtual void execute()
  {
    if (status != Ok)
      return

    if (publishInterval > 0)
      readyToPublish = (Sys.ticks()-lastPublishTime) >= (long)publishInterval*1sec
  }
  
  override int parentEvent(int eType, Component parent)
  {
    if (eType == Component.ADDED && (!parent.type.is(Publisher.type) && !parent.type.is(Subscriber.type)))
      status := Err_InvalidParent; 
    return 0
  }
  
  @asStr virtual void publish(Obj handle)
  {
    if (status != Ok)
      return

    if (handle == null)
    {
      log.message("PUBLISH: null handle")
      return
    }

    if (!readyToPublish)
      return

    Str msg = getPayload()
    doPublish(handle, topic.toStr(), msg, msg.length()+1, QoS)

    lastPublishTime = Sys.ticks()
    readyToPublish = false
  }
  
  virtual bool updateData(Obj handle)
  {
    bool result = fetchData(handle, topic.toStr(), strBuf, 63)
    // if (result)
    //   log.message("SUBSCRIBE: update: " + strBuf);
    return result
  }
  
  @asStr virtual void subscribe(Obj handle, Buf host, int port)
  {
    if (status != Ok)
      return

    if (handle == null)
    {
      log.message("SUBSCRIBE: null handle")
      return
    }

    if (subscribedToTopic)
    {
      updateData(handle)
    }
    else
    {
      Str shost = host.toStr()
      log.message("SUBSCRIBE: topic=${topic.toStr()}, host=$shost, port=$port")
      doSubscribe(handle, topic.toStr(), QoS);
      subscribedToTopic = true
    }
  }
  
  virtual override void changed(Slot slot) 
  {
    super.changed(slot)
    if (slot.name == "topic")
      validateStatus()
    else {
      if (status == Ok && slot.name == "payload" && publishInterval == 0)
        readyToPublish = true
    }
  }
  
  virtual void reset()
  {
    readyToPublish = false
    subscribedToTopic = false
    lastPublishTime = 0L
  }

  ////////////////////////////////////////////////////////////////
  // Fields
  ////////////////////////////////////////////////////////////////
  private bool readyToPublish = false
  private bool subscribedToTopic = false
  private long lastPublishTime = 0L
  
  protected inline Str(64) strBuf; 

  internal define Log log
}
